name: Test Report

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-test:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'
      
      - name: List directory contents
        run: |
          dir
          dir .github\workflows
      
      - name: Restore NuGet packages
        run: |
          nuget restore CSTestFramework.sln
          dotnet restore CSTestFramework.sln --force
      
      - name: Build
        run: dotnet build CSTestFramework.sln --configuration Release
      
      - name: Setup Java for Allure
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Setup Allure CommandLine
        run: |
          Invoke-WebRequest -Uri "https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.zip" -OutFile "allure.zip"
          Expand-Archive -Path "allure.zip" -DestinationPath "."
          $env:PATH += ";$(Get-Location)\allure-2.24.0\bin"
          echo "$env:PATH" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      
      - name: Prepare Allure Results Directory
        run: |
          # Create a clean directory for Allure results
          if (Test-Path "allure-results") { 
            Remove-Item -Recurse -Force "allure-results" -ErrorAction SilentlyContinue
          }
          New-Item -ItemType Directory -Path "allure-results" -Force
      
      # Run API tests with separate process
      - name: Run API Tests
        run: |
          dotnet test API.Tests/CSTestFramework.API.Tests.csproj --configuration Release --no-build --logger "console;verbosity=detailed"
        continue-on-error: true
      
      # Wait a moment before running UI tests to ensure resources are released
      - name: Wait before UI tests
        run: Start-Sleep -Seconds 5
      
      # Run UI tests with separate process
      - name: Run UI Tests
        run: |
          dotnet test UI.Tests/CSTestFramework.UI.Tests.csproj --configuration Release --no-build --logger "console;verbosity=detailed"
        continue-on-error: true
      
      # Collect all Allure results
      - name: Collect Allure Results
        run: |
          # Get NUnit version from packages
          $nunitVersion = (Get-ChildItem -Path "packages" -Recurse -Filter "NUnit*" | Where-Object { $_.PSIsContainer } | Select-Object -First 1).Name
          if (-not $nunitVersion) {
            $nunitVersion = "NUnit (version unknown)"
          }
          Write-Host "Found NUnit version: $nunitVersion"
          
          # Try to get Chrome version
          $chromeVersionInfo = "unknown"
          try {
            $chromeExePath = Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\chrome.exe' -ErrorAction SilentlyContinue | Select-Object -ExpandProperty '(Default)' -ErrorAction SilentlyContinue
            if ($chromeExePath) {
              $version = (Get-Item $chromeExePath -ErrorAction SilentlyContinue).VersionInfo.ProductVersion
              if ($version) { 
                $chromeVersionInfo = $version 
                Write-Host "Found Chrome version: $chromeVersionInfo"
              }
            }
          } catch {
            Write-Host "Error detecting Chrome version: $_"
          }
          
          # Create executor.json
          $executor = @{
            name = "GitHub Actions"
            type = "github"
            reportName = "CSTestFramework Automation Report"
            buildName = "Build #${{ github.run_number }}"
            buildUrl = "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            reportUrl = "https://kryvokhatko.github.io/github.io/"
          } | ConvertTo-Json
          
          Set-Content -Path "allure-results/executor.json" -Value $executor -Encoding UTF8
          
          # Copy any test results to the allure-results directory
          Get-ChildItem -Path "API.Tests" -Recurse -Filter "allure-results" | 
            ForEach-Object {
              Copy-Item -Path "$($_.FullName)\*" -Destination "allure-results\" -Recurse -Force -ErrorAction SilentlyContinue
            }
            
          Get-ChildItem -Path "UI.Tests" -Recurse -Filter "allure-results" | 
            ForEach-Object {
              Copy-Item -Path "$($_.FullName)\*" -Destination "allure-results\" -Recurse -Force -ErrorAction SilentlyContinue
            }
          
          # Create environment.properties file AFTER copying test results to ensure it's not overwritten
          $envProps = @(
            "Browser=Chrome",
            "Browser.Version=$chromeVersionInfo",
            "Operating.System=$([System.Environment]::OSVersion.ToString())",
            "Framework=$nunitVersion",
            "Language=C#",
            "Base.URL=https://demo.litecart.net/"
          ) -join "`n"
          
          Write-Host "Writing environment properties:"
          Write-Host $envProps
          
          Set-Content -Path "allure-results/environment.properties" -Value $envProps -Encoding UTF8
          
          # Also create environment.xml for compatibility
          $osVersion = [System.Environment]::OSVersion.ToString()
          
          # Create XML content line by line to avoid YAML parsing issues
          $xmlLines = @()
          $xmlLines += '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'
          $xmlLines += '<environment>'
          $xmlLines += '    <parameter>'
          $xmlLines += '        <key>Browser</key>'
          $xmlLines += '        <value>Chrome</value>'
          $xmlLines += '    </parameter>'
          $xmlLines += '    <parameter>'
          $xmlLines += '        <key>Browser.Version</key>'
          $xmlLines += "        <value>$chromeVersionInfo</value>"
          $xmlLines += '    </parameter>'
          $xmlLines += '    <parameter>'
          $xmlLines += '        <key>Operating.System</key>'
          $xmlLines += "        <value>$osVersion</value>"
          $xmlLines += '    </parameter>'
          $xmlLines += '    <parameter>'
          $xmlLines += '        <key>Framework</key>'
          $xmlLines += "        <value>$nunitVersion</value>"
          $xmlLines += '    </parameter>'
          $xmlLines += '    <parameter>'
          $xmlLines += '        <key>Language</key>'
          $xmlLines += '        <value>C#</value>'
          $xmlLines += '    </parameter>'
          $xmlLines += '    <parameter>'
          $xmlLines += '        <key>Base.URL</key>'
          $xmlLines += '        <value>https://demo.litecart.net/</value>'
          $xmlLines += '    </parameter>'
          $xmlLines += '</environment>'
          
          $xmlContent = $xmlLines -join "`n"
          Set-Content -Path "allure-results/environment.xml" -Value $xmlContent -Encoding UTF8
          Write-Host "Created environment.xml file"
          
          # Create categories.json for test result categorization
          $categoriesArray = @(
            @{
              name = "Ignored tests"
              matchedStatuses = @("skipped")
            },
            @{
              name = "Infrastructure problems"
              matchedStatuses = @("broken", "failed")
              messageRegex = ".*System\\..*Exception.*"
            },
            @{
              name = "Element interaction failures"
              matchedStatuses = @("broken")
              messageRegex = ".*Element.*not.*found.*"
            },
            @{
              name = "Product defects"
              matchedStatuses = @("failed")
            },
            @{
              name = "Test defects"
              matchedStatuses = @("broken")
            }
          )
          
          $categoriesJson = ConvertTo-Json -InputObject $categoriesArray -Depth 3
          Set-Content -Path "allure-results/categories.json" -Value $categoriesJson -Encoding UTF8
          Write-Host "Created categories.json file"
            
          # Verify environment.properties exists in the results directory
          if (Test-Path "allure-results/environment.properties") {
            Write-Host "environment.properties file exists in allure-results directory"
            Get-Content "allure-results/environment.properties"
          } else {
            Write-Host "WARNING: environment.properties file not found in allure-results directory"
          }
      
      - name: Generate Allure Report
        run: |
          allure generate allure-results --clean -o allure-report
          
          # Ensure environment.xml is in the data directory
          if (Test-Path "allure-results/environment.xml") {
            Write-Host "Copying environment.xml to report data directory"
            if (-not (Test-Path "allure-report/data")) {
              New-Item -ItemType Directory -Path "allure-report/data" -Force
            }
            Copy-Item -Path "allure-results/environment.xml" -Destination "allure-report/data/" -Force
          }
          
          # Verify environment.properties in the generated report
          if (Test-Path "allure-report/data/environment.xml") {
            Write-Host "environment.xml file exists in allure-report/data directory"
            Get-Content "allure-report/data/environment.xml"
          } else {
            Write-Host "WARNING: environment.xml file not found in allure-report/data directory"
          }
      
      - name: Upload Allure Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report/
          retention-days: 30

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Allure Report
        uses: actions/download-artifact@v4
        with:
          name: allure-report
          path: allure-report

      # Try to download history from the gh-pages branch if it exists
      - name: Try to get history from gh-pages branch
        id: get_history
        continue-on-error: true
        run: |
          mkdir -p allure-history
          git fetch origin gh-pages --depth=1 || echo "No gh-pages branch found"
          if git rev-parse --verify origin/gh-pages >/dev/null 2>&1; then
            echo "Found gh-pages branch, checking for history"
            git checkout origin/gh-pages -- history || echo "No history directory in gh-pages branch"
            if [ -d "history" ]; then
              echo "History directory found, copying to allure-history"
              cp -r history allure-history/ || true
              echo "history_found=true" >> $GITHUB_OUTPUT
            else
              echo "No history directory found in gh-pages branch"
              echo "history_found=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "No gh-pages branch found"
            echo "history_found=false" >> $GITHUB_OUTPUT
          fi

      # Prepare history directory
      - name: Prepare Allure history
        run: |
          mkdir -p allure-report/history
          if [ -d "allure-history/history" ] && [ "$(ls -A allure-history/history 2>/dev/null)" ]; then
            echo "Previous history found, copying to report"
            cp -r allure-history/history/* allure-report/history/ || true
          else
            echo "No previous history found, using empty history directory"
          fi

      - name: Verify Allure Report Directory
        run: |
          # Check if the directory exists and has content
          if [ -d "allure-report" ]; then
            echo "Allure report directory exists"
            find allure-report -type f | wc -l
          else
            echo "Allure report directory does not exist"
            exit 1
          fi
      
      # Ensure executor.json is properly set
      - name: Update executor information
        run: |
          cat > allure-report/widgets/summary.json << EOF
          {
            "reportName": "CSTestFramework Automation Report",
            "testRuns": [],
            "statistic": {
              "failed": 0,
              "broken": 0,
              "skipped": 0,
              "passed": 0,
              "unknown": 0,
              "total": 0
            },
            "time": {}
          }
          EOF
          
          cat > allure-report/widgets/executors.json << EOF
          {
            "total" : 1,
            "items" : [ {
              "name" : "GitHub Actions",
              "type" : "github",
              "url" : "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "buildOrder" : ${{ github.run_number }},
              "buildName" : "Build #${{ github.run_number }}",
              "reportName" : "CSTestFramework Automation Report",
              "reportUrl" : "https://kryvokhatko.github.io/github.io/"
            } ]
          }
          EOF
          
          # Also create executor.json in the root directory
          cat > allure-report/executor.json << EOF
          {
            "name" : "GitHub Actions",
            "type" : "github",
            "reportName" : "CSTestFramework Automation Report",
            "buildName" : "Build #${{ github.run_number }}",
            "buildUrl" : "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "reportUrl" : "https://kryvokhatko.github.io/github.io/"
          }
          EOF
          
          # Update report-data.json if it exists
          if [ -f "allure-report/data/report-data.json" ]; then
            echo "Updating report-data.json"
            # Use jq if available, otherwise use sed
            if command -v jq &> /dev/null; then
              jq '.reportName = "CSTestFramework Automation Report"' allure-report/data/report-data.json > temp.json && mv temp.json allure-report/data/report-data.json
            else
              sed -i 's/"reportName":[^,]*/"reportName": "CSTestFramework Automation Report"/g' allure-report/data/report-data.json
            fi
          fi
          
          echo "Updated executor information"
      
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: allure-report
          branch: gh-pages
          clean: true
          single-commit: true
          commit-message: "Deploy Allure report from GitHub Actions build ${{ github.run_number }}"
          force: true
      
      # Save history for next run
      - name: Save Allure history
        uses: actions/upload-artifact@v4
        with:
          name: allure-history
          path: allure-report/history
          retention-days: 30 