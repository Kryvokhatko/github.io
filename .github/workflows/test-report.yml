name: Test Report

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-test:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'
      
      - name: Install Allure.NUnit adapter
        run: |
          nuget install Allure.NUnit -Version 2.12.1 -OutputDirectory packages
          nuget install NUnit.ConsoleRunner -Version 3.16.3 -OutputDirectory packages
      
      - name: List directory contents
        run: |
          dir
          dir .github\workflows
      
      - name: Restore NuGet packages
        run: |
          nuget restore CSTestFramework.sln
          dotnet restore CSTestFramework.sln --force
      
      - name: Build
        run: dotnet build CSTestFramework.sln --configuration Release
      
      - name: Setup Java for Allure
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      
      # Setup Allure CommandLine
      - name: Setup Allure CommandLine
        run: |
          Invoke-WebRequest -Uri "https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.zip" -OutFile "allure.zip"
          Expand-Archive -Path "allure.zip" -DestinationPath "."
          $env:PATH += ";$(Get-Location)\allure-2.24.0\bin"
          echo "$env:PATH" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      
      # Prepare Allure Results Directory
      - name: Prepare Allure Results Directory
        run: |
          # Create a clean directory for Allure results
          if (Test-Path "allure-results") { 
            Remove-Item -Recurse -Force "allure-results" -ErrorAction SilentlyContinue
          }
          New-Item -ItemType Directory -Path "allure-results" -Force
          
          # Create history directory
          New-Item -ItemType Directory -Path "allure-results/history" -Force
      
      # Download Allure history from GitHub Pages
      - name: Download Allure History
        if: github.event_name != 'pull_request'
        continue-on-error: true
        run: |
          # Create allure-history directory
          New-Item -ItemType Directory -Path allure-history -Force
          
          # Try to download history from GitHub Pages
          try {
            Invoke-WebRequest -Uri "https://kryvokhatko.github.io/github.io/history/history.json" -OutFile "allure-history/history.json"
            Write-Host "Successfully downloaded history.json"
            
            # Copy history to allure-results
            Copy-Item -Path "allure-history/history.json" -Destination "allure-results/history/" -Force
            
            # Try to download history-trend.json
            Invoke-WebRequest -Uri "https://kryvokhatko.github.io/github.io/history/history-trend.json" -OutFile "allure-history/history-trend.json"
            Copy-Item -Path "allure-history/history-trend.json" -Destination "allure-results/history/" -Force
            
            # Try to download categories-trend.json
            Invoke-WebRequest -Uri "https://kryvokhatko.github.io/github.io/history/categories-trend.json" -OutFile "allure-history/categories-trend.json"
            Copy-Item -Path "allure-history/categories-trend.json" -Destination "allure-results/history/" -Force
            
            # Try to download duration-trend.json
            Invoke-WebRequest -Uri "https://kryvokhatko.github.io/github.io/history/duration-trend.json" -OutFile "allure-history/duration-trend.json"
            Copy-Item -Path "allure-history/duration-trend.json" -Destination "allure-results/history/" -Force
            
            # Try to download retry-trend.json
            Invoke-WebRequest -Uri "https://kryvokhatko.github.io/github.io/history/retry-trend.json" -OutFile "allure-history/retry-trend.json"
            Copy-Item -Path "allure-history/retry-trend.json" -Destination "allure-results/history/" -Force
            
            Write-Host "Successfully downloaded and copied history files"
          } catch {
            Write-Host "Failed to download history: $_"
            Write-Host "This is normal for the first run or if the history files don't exist yet"
          }
      
      # Run API tests with separate process
      - name: Run API Tests
        run: |
          # Create allure.config file to ensure results go to the right place
          $allureConfig = @{
            allure = @{
              directory = "allure-results/api"
              title = "CSTestFramework API Tests"
              links = @(
                @{
                  type = "github"
                  url = "https://github.com/kryvokhatko/CSTestFramework/issues/{}"
                  pattern = "GH-\\d+"
                }
              )
            }
          } | ConvertTo-Json -Depth 10
          Set-Content -Path "API.Tests/allure.config" -Value $allureConfig
          
          # Run tests with NUnit console runner to ensure Allure results are generated
          Write-Host "Running API tests with NUnit console runner"
          
          # Use NUnit3 console runner from packages directory if available
          $nunitConsole = Get-ChildItem -Path "packages" -Recurse -Filter "nunit3-console.exe" | Select-Object -First 1
          if ($nunitConsole) {
            Write-Host "Using NUnit3 console runner: $($nunitConsole.FullName)"
            & $nunitConsole.FullName "API.Tests/bin/Release/CSTestFramework.API.Tests.dll" "--work=allure-results/api"
          } else {
            # Fallback to dotnet test
            Write-Host "NUnit3 console runner not found, using dotnet test"
            dotnet test API.Tests/CSTestFramework.API.Tests.csproj --configuration Release --no-build --logger "console;verbosity=detailed"
          }
        continue-on-error: true
      
      # Wait a moment before running UI tests to ensure resources are released
      - name: Wait before UI tests
        run: Start-Sleep -Seconds 5
      
      # Run UI tests with separate process
      - name: Run UI Tests
        run: |
          # Create allure.config file to ensure results go to the right place
          $allureConfig = @{
            allure = @{
              directory = "allure-results/ui"
              title = "CSTestFramework UI Tests"
              links = @(
                @{
                  type = "github"
                  url = "https://github.com/kryvokhatko/CSTestFramework/issues/{}"
                  pattern = "GH-\\d+"
                }
              )
            }
          } | ConvertTo-Json -Depth 10
          Set-Content -Path "UI.Tests/allure.config" -Value $allureConfig
          
          # Run tests with NUnit console runner to ensure Allure results are generated
          Write-Host "Running UI tests with NUnit console runner"
          
          # Use NUnit3 console runner from packages directory if available
          $nunitConsole = Get-ChildItem -Path "packages" -Recurse -Filter "nunit3-console.exe" | Select-Object -First 1
          if ($nunitConsole) {
            Write-Host "Using NUnit3 console runner: $($nunitConsole.FullName)"
            & $nunitConsole.FullName "UI.Tests/bin/Release/CSTestFramework.UI.Tests.dll" "--work=allure-results/ui"
          } else {
            # Fallback to dotnet test
            Write-Host "NUnit3 console runner not found, using dotnet test"
            dotnet test UI.Tests/CSTestFramework.UI.Tests.csproj --configuration Release --no-build --logger "console;verbosity=detailed"
          }
        continue-on-error: true
      
      # Check if test results are being generated
      - name: Check Test Results
        run: |
          Write-Host "Checking for test results..."
          
          # Check if any Allure results exist in the project directories
          $apiResults = Get-ChildItem -Path "API.Tests" -Recurse -Filter "allure-results" -Directory -ErrorAction SilentlyContinue
          $uiResults = Get-ChildItem -Path "UI.Tests" -Recurse -Filter "allure-results" -Directory -ErrorAction SilentlyContinue
          $mainResults = @()
          
          if (Test-Path "allure-results/api") {
            $mainResults += Get-ChildItem -Path "allure-results/api" -File -ErrorAction SilentlyContinue
            Write-Host "Found $(($mainResults | Measure-Object).Count) API test result files in allure-results/api"
          }
          
          if (Test-Path "allure-results/ui") {
            $uiFiles = Get-ChildItem -Path "allure-results/ui" -File -ErrorAction SilentlyContinue
            $mainResults += $uiFiles
            Write-Host "Found $(($uiFiles | Measure-Object).Count) UI test result files in allure-results/ui"
          }
          
          if ($apiResults) {
            Write-Host "API test results found in:"
            $apiResults | ForEach-Object { Write-Host $_.FullName }
            Write-Host "Contents:"
            Get-ChildItem -Path $apiResults.FullName | ForEach-Object { Write-Host $_.Name }
          } else {
            Write-Host "No API test results found in project directories"
          }
          
          if ($uiResults) {
            Write-Host "UI test results found in:"
            $uiResults | ForEach-Object { Write-Host $_.FullName }
            Write-Host "Contents:"
            Get-ChildItem -Path $uiResults.FullName | ForEach-Object { Write-Host $_.Name }
          } else {
            Write-Host "No UI test results found in project directories"
          }
          
          # Check if the main allure-results directory has any files
          if (Test-Path "allure-results") {
            Write-Host "Main allure-results directory exists"
            $files = Get-ChildItem -Path "allure-results" -File -Recurse
            Write-Host "Found $($files.Count) files in allure-results directory (including subdirectories)"
            if ($files.Count -gt 0) {
              Write-Host "Sample files:"
              $files | Select-Object -First 10 | ForEach-Object { Write-Host $_.FullName }
            }
          } else {
            Write-Host "Main allure-results directory does not exist"
          }
          
          # Create allure-results directory if it doesn't exist
          if (-not (Test-Path "allure-results")) {
            New-Item -ItemType Directory -Path "allure-results" -Force
          }
          
          # Copy all test results to the main allure-results directory
          if (Test-Path "allure-results/api") {
            Get-ChildItem -Path "allure-results/api" -File | ForEach-Object {
              Copy-Item -Path $_.FullName -Destination "allure-results/" -Force
            }
          }
          
          if (Test-Path "allure-results/ui") {
            Get-ChildItem -Path "allure-results/ui" -File | ForEach-Object {
              Copy-Item -Path $_.FullName -Destination "allure-results/" -Force
            }
          }
          
          # Check for real test results
          $testResultFiles = Get-ChildItem -Path "allure-results" -Filter "*-result.json" -File -ErrorAction SilentlyContinue
          if ($testResultFiles -and $testResultFiles.Count -gt 0) {
            Write-Host "Found $($testResultFiles.Count) real test result files"
          } else {
            Write-Host "No test result files found. This could indicate an issue with the test execution or Allure integration."
            Write-Host "Please check that the Allure.NUnit adapter is properly configured in your test projects."
          }
      
      # Collect all Allure results
      - name: Collect Allure Results
        run: |
          # Get NUnit version from packages
          $nunitVersion = (Get-ChildItem -Path "packages" -Recurse -Filter "NUnit*" | Where-Object { $_.PSIsContainer } | Select-Object -First 1).Name
          if (-not $nunitVersion) {
            $nunitVersion = "NUnit (version unknown)"
          }
          Write-Host "Found NUnit version: $nunitVersion"
          
          # Try to get Chrome version
          $chromeVersionInfo = "unknown"
          try {
            $chromeExePath = Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\chrome.exe' -ErrorAction SilentlyContinue | Select-Object -ExpandProperty '(Default)' -ErrorAction SilentlyContinue
            if ($chromeExePath) {
              $version = (Get-Item $chromeExePath -ErrorAction SilentlyContinue).VersionInfo.ProductVersion
              if ($version) { 
                $chromeVersionInfo = $version 
                Write-Host "Found Chrome version: $chromeVersionInfo"
              }
            }
          } catch {
            Write-Host "Error detecting Chrome version: $_"
          }
          
          # Create executor.json
          $executor = @{
            name = "GitHub Actions"
            type = "github"
            reportName = "CSTestFramework Automation Report"
            buildName = "Build #${{ github.run_number }}"
            buildUrl = "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            reportUrl = "https://kryvokhatko.github.io/github.io/"
          } | ConvertTo-Json
          
          # Create allure-results directory if it doesn't exist
          if (-not (Test-Path "allure-results")) {
            New-Item -ItemType Directory -Path "allure-results" -Force
          }
          
          Set-Content -Path "allure-results/executor.json" -Value $executor -Encoding UTF8
          
          # Create categories.json for proper test categorization
          $categories = @(
            @{
              name = "API Tests"
              messageRegex = ".*API.*"
              matchedStatuses = @("passed", "failed", "broken", "skipped")
            },
            @{
              name = "UI Tests"
              messageRegex = ".*UI.*"
              matchedStatuses = @("passed", "failed", "broken", "skipped")
            },
            @{
              name = "Failed Tests"
              matchedStatuses = @("failed")
            },
            @{
              name = "Broken Tests"
              matchedStatuses = @("broken")
            },
            @{
              name = "Skipped Tests"
              matchedStatuses = @("skipped")
            }
          ) | ConvertTo-Json -Depth 10
          
          # Create data directory if it doesn't exist
          if (-not (Test-Path "allure-results/data")) {
            New-Item -ItemType Directory -Path "allure-results/data" -Force
          }
          
          # Write categories.json
          Set-Content -Path "allure-results/categories.json" -Value $categories -Encoding UTF8
          
          # Look for allure-results directories in the entire project
          Write-Host "Searching for allure-results directories..."
          $allureResultsDirs = Get-ChildItem -Path "." -Recurse -Filter "allure-results" -Directory -ErrorAction SilentlyContinue
          
          # Get the full path of the main allure-results directory
          $mainAllureResultsPath = $null
          try {
            $mainAllureResultsPath = (Resolve-Path "allure-results" -ErrorAction SilentlyContinue).Path
            Write-Host "Main allure-results directory: $mainAllureResultsPath"
          } catch {
            Write-Host "Main allure-results directory not found, will be created"
          }
          
          foreach ($dir in $allureResultsDirs) {
            # Skip the main allure-results directory to avoid copying files to themselves
            if ($mainAllureResultsPath -and $dir.FullName -eq $mainAllureResultsPath) {
              Write-Host "Skipping main allure-results directory: $($dir.FullName)"
              continue
            }
            
            Write-Host "Found allure-results at: $($dir.FullName)"
            # Copy all files from each found directory
            Get-ChildItem -Path $dir.FullName -File | ForEach-Object {
              Write-Host "Copying $($_.Name) to main allure-results directory"
              Copy-Item -Path $_.FullName -Destination "allure-results\" -Force
            }
          }
          
          # Create environment.properties file AFTER copying test results to ensure it's not overwritten
          $envProps = @(
            "Browser=Chrome",
            "Browser.Version=$chromeVersionInfo",
            "Operating.System=$([System.Environment]::OSVersion.ToString())",
            "Framework=$nunitVersion",
            "Language=C#",
            "Base.URL=https://demo.litecart.net/"
          ) -join "`n"
          
          Write-Host "Writing environment properties:"
          Write-Host $envProps
          
          Set-Content -Path "allure-results/environment.properties" -Value $envProps -Encoding UTF8
          
          # Also create environment.xml for compatibility
          $osVersion = [System.Environment]::OSVersion.ToString()
          
          # Create XML content line by line to avoid YAML parsing issues
          $xmlLines = @()
          $xmlLines += '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'
          $xmlLines += '<environment>'
          $xmlLines += '    <parameter>'
          $xmlLines += '        <key>Browser</key>'
          $xmlLines += '        <value>Chrome</value>'
          $xmlLines += '    </parameter>'
          $xmlLines += '    <parameter>'
          $xmlLines += '        <key>Browser.Version</key>'
          $xmlLines += "        <value>$chromeVersionInfo</value>"
          $xmlLines += '    </parameter>'
          $xmlLines += '    <parameter>'
          $xmlLines += '        <key>Operating.System</key>'
          $xmlLines += "        <value>$osVersion</value>"
          $xmlLines += '    </parameter>'
          $xmlLines += '    <parameter>'
          $xmlLines += '        <key>Framework</key>'
          $xmlLines += "        <value>$nunitVersion</value>"
          $xmlLines += '    </parameter>'
          $xmlLines += '    <parameter>'
          $xmlLines += '        <key>Language</key>'
          $xmlLines += '        <value>C#</value>'
          $xmlLines += '    </parameter>'
          $xmlLines += '    <parameter>'
          $xmlLines += '        <key>Base.URL</key>'
          $xmlLines += '        <value>https://demo.litecart.net/</value>'
          $xmlLines += '    </parameter>'
          $xmlLines += '</environment>'
          
          $xmlContent = $xmlLines -join "`n"
          Set-Content -Path "allure-results/environment.xml" -Value $xmlContent -Encoding UTF8
          Write-Host "Created environment.xml file"
          
          # Verify environment.properties exists in the results directory
          if (Test-Path "allure-results/environment.properties") {
            Write-Host "environment.properties file exists in allure-results directory"
            Get-Content "allure-results/environment.properties"
          } else {
            Write-Host "WARNING: environment.properties file not found in allure-results directory"
          }
      
      - name: Generate Allure Report
        run: |
          # First, check if we have real test results
          $testResultFiles = Get-ChildItem -Path "allure-results" -Filter "*-result.json" -File -ErrorAction SilentlyContinue
          Write-Host "Found $($testResultFiles.Count) test result files"
          
          # Create allure-report directory if it doesn't exist
          if (-not (Test-Path "allure-report")) {
            New-Item -ItemType Directory -Path "allure-report" -Force
          }
          
          # Generate the report using official Allure command line options
          Write-Host "Generating Allure report..."
          allure generate allure-results --clean -o allure-report --report-title "CSTestFramework Automation Report"
          
          # Copy history files to history directory for next run
          if (Test-Path "allure-report/history") {
            Write-Host "Copying history files for next run"
            if (-not (Test-Path "allure-history")) {
              New-Item -ItemType Directory -Path "allure-history" -Force
            }
            Copy-Item -Path "allure-report/history/*" -Destination "allure-history/" -Force -Recurse
          }
          
          # Print report structure for debugging
          Write-Host "Allure report structure:"
          Get-ChildItem -Path "allure-report" -Recurse -Directory | Select-Object -First 10 | ForEach-Object { Write-Host $_.FullName }
          Write-Host "Sample files:"
          Get-ChildItem -Path "allure-report" -Recurse -File | Select-Object -First 10 | ForEach-Object { Write-Host $_.FullName }
      
      - name: Upload Allure Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report/
          retention-days: 30

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Allure Report
        uses: actions/download-artifact@v4
        with:
          name: allure-report
          path: allure-report

      # Setup Java for Allure
      - name: Setup Java for Allure
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      
      # Setup Allure CommandLine
      - name: Setup Allure CommandLine
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.tgz
          tar -zxvf allure-2.24.0.tgz
          export PATH=$PATH:$(pwd)/allure-2.24.0/bin
          echo "$(pwd)/allure-2.24.0/bin" >> $GITHUB_PATH

      # Try to download history from the gh-pages branch if it exists
      - name: Try to get history from gh-pages branch
        id: get_history
        continue-on-error: true
        run: |
          mkdir -p allure-history
          git fetch origin gh-pages --depth=1 || echo "No gh-pages branch found"
          if git rev-parse --verify origin/gh-pages >/dev/null 2>&1; then
            echo "Found gh-pages branch, checking for history"
            git checkout origin/gh-pages -- history || echo "No history directory in gh-pages branch"
            if [ -d "history" ]; then
              echo "History directory found, copying to allure-history"
              cp -r history/* allure-history/ || true
              echo "history_found=true" >> $GITHUB_OUTPUT
            else
              echo "No history directory found in gh-pages branch"
              echo "history_found=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "No gh-pages branch found"
            echo "history_found=false" >> $GITHUB_OUTPUT
          fi

      # Prepare history directory
      - name: Prepare Allure history
        run: |
          mkdir -p allure-report/history
          if [ -d "allure-history" ] && [ "$(ls -A allure-history 2>/dev/null)" ]; then
            echo "Previous history found, copying to report"
            cp -r allure-history/* allure-report/history/ || true
          else
            echo "No previous history found, using empty history directory"
          fi

      # Verify Allure Report Directory
      - name: Verify Allure Report Directory
        run: |
          # Check if the directory exists and has content
          if [ -d "allure-report" ]; then
            echo "Allure report directory exists"
            find allure-report -type f | wc -l
            echo "Sample files:"
            find allure-report -type f | head -n 10
          else
            echo "Allure report directory does not exist"
            exit 1
          fi
      
      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: allure-report
          branch: gh-pages
          clean: true
          single-commit: true
          commit-message: "Deploy Allure report from GitHub Actions build ${{ github.run_number }}"
          force: true
      
      # Save history for next run
      - name: Save Allure history
        uses: actions/upload-artifact@v4
        with:
          name: allure-history
          path: allure-report/history
          retention-days: 30 