name: Test and Publish Report

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup .NET Framework
        run: |
          # Windows Server 2022 already has .NET Framework 4.8 installed
          # We just need the developer pack
          Invoke-WebRequest -Uri "https://download.visualstudio.microsoft.com/download/pr/2d6bb6b2-226a-4baa-bdec-798822606ff1/8494001c276a4b96804cde7829c04d7f/ndp48-devpack-enu.exe" -OutFile "ndp48-devpack-enu.exe"
          Start-Process -FilePath "ndp48-devpack-enu.exe" -ArgumentList "/quiet", "/norestart" -Wait
        shell: pwsh
          
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.3.1
          
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.2.0
        
      - name: Setup VSTest
        uses: darenm/Setup-VSTest@v1
        
      - name: Restore NuGet packages
        run: nuget restore CSTestFramework.sln
        
      - name: Build Solution
        run: |
          msbuild CSTestFramework.sln /p:Configuration=Debug /p:Platform="Any CPU" /p:RestorePackages=true /verbosity:detailed
        
      - name: Install Allure CommandLine
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          
          # Download Allure commandline
          $allureVersion = "2.24.1"
          $allureUrl = "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/$allureVersion/allure-commandline-$allureVersion.zip"
          $allureZip = "allure.zip"
          $allureDir = "allure-$allureVersion"
          
          Invoke-WebRequest -Uri $allureUrl -OutFile $allureZip
          Expand-Archive -Path $allureZip -DestinationPath .
          
          # Add Allure to PATH
          echo "$pwd\$allureDir\bin" | Out-File -FilePath $env:GITHUB_PATH -Append
          $env:Path += ";$pwd\$allureDir\bin"
        shell: pwsh
        
      - name: Run Tests
        run: |
          $env:ALLURE_RESULTS_DIRECTORY="$pwd\allure-results"
          New-Item -ItemType Directory -Force -Path "allure-results"
          
          # Find all test DLLs
          $testDlls = Get-ChildItem -Recurse -Filter "*Tests.dll" -Path ".\**\bin\Debug" | Where-Object { $_.FullName -match 'bin\\Debug' }
          
          foreach ($dll in $testDlls) {
              Write-Host "Running tests in: $($dll.FullName)"
              vstest.console.exe $dll.FullName /Logger:"trx;LogFileName=$pwd\TestResults.trx" /TestAdapterPath:packages
          }
        shell: pwsh
        
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: TestResults.trx
          
      - name: Generate Allure Report
        if: always()
        run: |
          Write-Host "Current directory: $pwd"
          Write-Host "Checking allure-results directory:"
          Get-ChildItem "allure-results" -Recurse
          
          Write-Host "Allure version:"
          allure --version
          
          allure generate allure-results -o allure-report --clean
          
          Write-Host "Checking generated report:"
          Get-ChildItem "allure-report" -Recurse
        shell: pwsh
        
      - name: Setup Pages
        if: success()
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        if: success()
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'allure-report'
          
      - name: Deploy to GitHub Pages
        if: success()
        id: deployment
        uses: actions/deploy-pages@v4 