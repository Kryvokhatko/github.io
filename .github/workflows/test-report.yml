name: Test and Publish Report

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

env:
  CHROME_VERSION: "138.0.7204.92"
  CI_CHROME_PATH: "C:\\chrome-win64\\chrome.exe"
  CI_CHROMEDRIVER_PATH: "C:\\ChromeDriver"

jobs:
  test:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Chrome and ChromeDriver
        shell: pwsh
        run: |
          Write-Host "Installing Chrome and ChromeDriver version $env:CHROME_VERSION"
          
          # Download Chrome
          $ChromeZip = "$env:TEMP\chrome-win64.zip"
          $ChromeUrl = "https://storage.googleapis.com/chrome-for-testing-public/$env:CHROME_VERSION/win64/chrome-win64.zip"
          Invoke-WebRequest -Uri $ChromeUrl -OutFile $ChromeZip
          
          # Extract Chrome
          Write-Host "Extracting Chrome..."
          Expand-Archive $ChromeZip -DestinationPath "C:\" -Force
          Remove-Item $ChromeZip
          
          # Download ChromeDriver
          $DriverZip = "$env:TEMP\chromedriver-win64.zip"
          $DriverUrl = "https://storage.googleapis.com/chrome-for-testing-public/$env:CHROME_VERSION/win64/chromedriver-win64.zip"
          Invoke-WebRequest -Uri $DriverUrl -OutFile $DriverZip
          
          # Extract ChromeDriver
          Write-Host "Extracting ChromeDriver..."
          New-Item -ItemType Directory -Force -Path $env:CI_CHROMEDRIVER_PATH
          Expand-Archive $DriverZip -DestinationPath "C:\" -Force
          Copy-Item "C:\chromedriver-win64\chromedriver.exe" $env:CI_CHROMEDRIVER_PATH -Force
          Remove-Item $DriverZip
          Remove-Item "C:\chromedriver-win64" -Recurse -Force
          
          # Verify installation
          Write-Host "Chrome version:"
          & $env:CI_CHROME_PATH --version
          Write-Host "ChromeDriver version:"
          & "$env:CI_CHROMEDRIVER_PATH\chromedriver.exe" --version
      
      - name: Setup .NET Framework
        shell: pwsh
        run: |
          # Download .NET Framework 4.8 Developer Pack
          $url = "https://go.microsoft.com/fwlink/?linkid=2088517"
          $outFile = "ndp48-devpack-enu.exe"
          
          Write-Host "Downloading .NET Framework 4.8 Developer Pack..."
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          $webClient = New-Object System.Net.WebClient
          $webClient.DownloadFile($url, $outFile)
          
          Write-Host "Installing .NET Framework 4.8 Developer Pack..."
          Start-Process -FilePath $outFile -ArgumentList "/quiet", "/norestart" -Wait -NoNewWindow
          
          Write-Host ".NET Framework 4.8 Developer Pack installation completed"
          
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.3.1
          
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.2.0
        
      - name: Setup VSTest
        uses: darenm/Setup-VSTest@v1
        
      - name: Restore NuGet packages
        run: nuget restore CSTestFramework.sln
        
      - name: Build Solution
        run: |
          msbuild CSTestFramework.sln /p:Configuration=Debug /p:Platform="Any CPU" /p:RestorePackages=true /verbosity:detailed
        
      - name: Install Allure
        shell: pwsh
        run: |
          Write-Host "Installing Allure..."
          
          # Download and extract Allure
          $allureVersion = "2.24.1"
          $allureUrl = "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/$allureVersion/allure-commandline-$allureVersion.zip"
          $allureZip = "allure.zip"
          $allureDir = "allure-$allureVersion"
          
          # Create a directory for Allure
          New-Item -ItemType Directory -Force -Path "C:\allure"
          Set-Location "C:\allure"
          
          # Download and extract
          Write-Host "Downloading Allure from $allureUrl"
          Invoke-WebRequest -Uri $allureUrl -OutFile $allureZip
          Expand-Archive -Path $allureZip -DestinationPath . -Force
          
          # Add to PATH
          $allureBinPath = "C:\allure\$allureDir\bin"
          Write-Host "Adding $allureBinPath to PATH"
          $env:PATH = "$allureBinPath;" + $env:PATH
          [Environment]::SetEnvironmentVariable("PATH", $env:PATH, "Machine")
          
          # Verify installation
          Write-Host "Allure installation directory contents:"
          Get-ChildItem -Path $allureBinPath
          
          # Return to original directory
          Set-Location $env:GITHUB_WORKSPACE
          
          Write-Host "Allure installation completed"
        
      - name: Run Tests
        shell: pwsh
        run: |
          $env:ALLURE_RESULTS_DIRECTORY="$pwd\allure-results"
          New-Item -ItemType Directory -Force -Path "allure-results"
          
          Write-Host "Test DLLs search path: .\**\bin\Debug"
          $testDlls = Get-ChildItem -Recurse -Filter "*Tests.dll" -Path ".\**\bin\Debug" | Where-Object { $_.FullName -match 'bin\\Debug' }
          
          Write-Host "Found test DLLs:"
          $testDlls | ForEach-Object { Write-Host $_.FullName }
          
          foreach ($dll in $testDlls) {
              Write-Host "Running tests in: $($dll.FullName)"
              vstest.console.exe $dll.FullName /TestAdapterPath:packages /Logger:"trx;LogFileName=$pwd\TestResults.trx"
          }

          Write-Host "Contents of allure-results directory:"
          Get-ChildItem "allure-results" -Recurse | ForEach-Object {
              Write-Host $_.FullName
              if ($_.Extension -eq ".json") {
                  Write-Host "Content of $($_.Name):"
                  Get-Content $_.FullName
              }
          }
        
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: TestResults.trx
          
      - name: Generate Allure Report
        if: always()
        shell: pwsh
        run: |
          Write-Host "Current directory: $pwd"
          Write-Host "Current PATH: $env:PATH"
          
          Write-Host "Checking allure-results directory:"
          Get-ChildItem "allure-results" -Recurse
          
          Write-Host "Checking Allure installation:"
          Get-Command allure -ErrorAction SilentlyContinue
          
          Write-Host "Generating Allure report..."
          & "C:\allure\allure-2.24.1\bin\allure.bat" generate allure-results -o allure-report --clean
          
          Write-Host "Checking generated report:"
          Get-ChildItem "allure-report" -Recurse

      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-report
          path: allure-report

  deploy:
    needs: test
    runs-on: ubuntu-latest
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Download Allure Report
        uses: actions/download-artifact@v4
        with:
          name: allure-report
          path: allure-report

      - name: Create gh-pages Branch
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git checkout --orphan gh-pages
          git rm -rf .
          cp -r allure-report/* .
          rm -rf allure-report
          git add .
          git commit -m "Deploy Allure report to GitHub Pages"
          git push origin gh-pages --force

      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 