name: Test Report

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test:
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Windows SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            7.0.x
      
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Setup VSTest
        uses: darenm/Setup-VSTest@v1
        id: setup_vstest

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2
        
      - name: Restore NuGet packages
        run: nuget restore CSTestFramework.sln

      - name: Build solution
        run: msbuild CSTestFramework.sln /p:Configuration=Debug

      - name: Download Allure CommandLine
        shell: pwsh
        run: |
          Write-Host "Downloading Allure..."
          Invoke-WebRequest -Uri "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.24.1/allure-commandline-2.24.1.zip" -OutFile "allure-commandline.zip"
          Write-Host "Extracting Allure..."
          Expand-Archive -Path "allure-commandline.zip" -DestinationPath .
          Move-Item -Path "allure-2.24.1" -Destination "allure-commandline"
          Write-Host "Allure extracted to:"
          Get-ChildItem "allure-commandline" -Recurse

      - name: Download Allure History
        continue-on-error: true
        run: |
          New-Item -ItemType Directory -Force -Path "${{ github.workspace }}/allure-history"
          Invoke-WebRequest -Uri "https://kryvokhatko.github.io/github.io/history/history.json" -OutFile "${{ github.workspace }}/allure-history/history.json"
          Invoke-WebRequest -Uri "https://kryvokhatko.github.io/github.io/history/history-trend.json" -OutFile "${{ github.workspace }}/allure-history/history-trend.json"
          Invoke-WebRequest -Uri "https://kryvokhatko.github.io/github.io/history/categories-trend.json" -OutFile "${{ github.workspace }}/allure-history/categories-trend.json"
          Invoke-WebRequest -Uri "https://kryvokhatko.github.io/github.io/history/duration-trend.json" -OutFile "${{ github.workspace }}/allure-history/duration-trend.json"
          Invoke-WebRequest -Uri "https://kryvokhatko.github.io/github.io/history/retry-trend.json" -OutFile "${{ github.workspace }}/allure-history/retry-trend.json"

      - name: Run Tests
        shell: pwsh
        run: |
          Write-Host "Current directory: $pwd"
          Write-Host "Directory contents:"
          Get-ChildItem -Recurse | ForEach-Object { Write-Host $_.FullName }

          # Create results directory with explicit path
          $allureResultsPath = Join-Path ${{ github.workspace }} "allure-results"
          New-Item -ItemType Directory -Force -Path $allureResultsPath
          Write-Host "Created Allure results directory at: $allureResultsPath"
          
          # Set NUnit Console path
          $nunitPath = Join-Path ${{ github.workspace }} "packages\NUnit.ConsoleRunner.3.20.1\tools\nunit3-console.exe"
          Write-Host "Using NUnit Console at: $nunitPath"
          
          if (-not (Test-Path $nunitPath)) {
              Write-Host "Error: NUnit Console not found at $nunitPath"
              exit 1
          }
          
          # Find test assemblies
          $testDlls = Get-ChildItem -Recurse -Filter "*Tests.dll" -Path ".\**\bin\Debug" | Where-Object { $_.FullName -match 'bin\\Debug' }
          Write-Host "Found test assemblies:"
          $testDlls | ForEach-Object { Write-Host $_.FullName }
          
          foreach ($dll in $testDlls) {
              Write-Host "Running tests in: $($dll.FullName)"
              & $nunitPath $dll.FullName `
                --framework="net-4.8" `
                --where="cat!=IgnoreOnCI" `
                --labels=Before `
                --trace=Debug `
                --result="${{ github.workspace }}/TestResults.xml;format=nunit3" `
                --result="$allureResultsPath/allure-results.xml;format=nunit3"
              
              if ($LASTEXITCODE -ne 0) {
                  Write-Host "Warning: Tests in $($dll.FullName) failed with exit code $LASTEXITCODE"
              }
          }

          # Convert NUnit results to TRX format using VSTest
          $trxPath = Join-Path ${{ github.workspace }} "TestResults.trx"
          Write-Host "Generating TRX file at: $trxPath"
          
          # Use VSTest path from setup-vstest action
          $vstestPath = $env:VSTEST_PATH
          if (-not $vstestPath) {
              $vstestPath = "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe"
          }
          Write-Host "Using VSTest at: $vstestPath"
          
          if (-not (Test-Path $vstestPath)) {
              Write-Host "Error: VSTest not found at $vstestPath"
              exit 1
          }
          
          & $vstestPath @(Get-ChildItem -Recurse -Filter "*Tests.dll" -Path ".\**\bin\Debug" | Where-Object { $_.FullName -match 'bin\\Debug' }) /Logger:"trx;LogFileName=$trxPath"

          # Verify TRX file exists
          if (Test-Path $trxPath) {
              Write-Host "TRX file generated successfully at: $trxPath"
              Get-Content $trxPath | Select-Object -First 5
          } else {
              Write-Host "Warning: TRX file was not generated at: $trxPath"
          }

          Write-Host "Contents of allure-results directory:"
          Get-ChildItem $allureResultsPath -Recurse | ForEach-Object { Write-Host $_.FullName }

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: ${{ github.workspace }}/TestResults.trx
          retention-days: 30

      - name: Upload Allure results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results
          path: allure-results/
          retention-days: 30

      - name: Generate Allure Report
        if: always()
        shell: pwsh
        run: |
          Write-Host "Current directory structure:"
          Get-ChildItem -Recurse | ForEach-Object { Write-Host $_.FullName }

          # Create directories
          New-Item -ItemType Directory -Force -Path "_site"
          New-Item -ItemType Directory -Force -Path "allure-results"
          New-Item -ItemType Directory -Force -Path "_site/history"

          # Copy history if it exists
          if (Test-Path "allure-history") {
            Write-Host "Copying history files..."
            Copy-Item -Path "allure-history/*" -Destination "allure-results" -Recurse -Force
          }
          
          # Generate report
          Write-Host "Generating Allure report..."
          $allureCmd = Join-Path -Path $pwd -ChildPath "allure-commandline\bin\allure.bat"
          Write-Host "Allure command path: $allureCmd"
          & $allureCmd generate allure-results --clean -o allure-report
          
          # Copy report to GitHub Pages directory
          Write-Host "Copying report to _site directory..."
          Copy-Item -Path "allure-report/*" -Destination "_site" -Recurse -Force
          
          # Preserve history for next run
          Write-Host "Preserving history..."
          if (Test-Path "allure-report/history") {
            Copy-Item -Path "allure-report/history/*" -Destination "_site/history" -Recurse -Force
          }

          Write-Host "Final _site directory contents:"
          Get-ChildItem "_site" -Recurse | ForEach-Object { Write-Host $_.FullName }

      - name: Upload Allure report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-report
          path: allure-report/
          retention-days: 30

      - name: Setup Pages
        if: always()
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        if: always()
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

  deploy:
    if: always()
    needs: test
    runs-on: ubuntu-latest
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 